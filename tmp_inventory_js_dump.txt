// C4/C5 logic: movements form with scan mode + balances/movements views

// Utilities
function setMvStatus(msg){ const el=document.getElementById("mv-status"); if (el) el.textContent = msg; }

async function fetchJSON(url){ const r=await fetch(url,{credentials:"include"}); if(!r.ok) throw new Error(`HTTP ${r.status}`); return r.json(); }

// Movements form
(function(){
  const frmMove = document.getElementById("frm-move");
  if(!frmMove) return;
  const mvLines = document.querySelector("#tbl-mv-lines tbody");
  const scanInput = document.getElementById("scan-input");
  const scanLog = document.getElementById("scan-log");
  const modeRadios = frmMove.querySelectorAll('input[name="mode"]');
  modeRadios.forEach(r => r.addEventListener("change", () => {
    const scanMode = frmMove.mode.value === "scan";
    document.getElementById("scan-panel").hidden = !scanMode;
    document.getElementById("manual-panel").hidden = scanMode;
    if (scanMode && scanInput) scanInput.focus();
  }));

  function addMvLine(row){
    const tr=document.createElement("tr");
    tr.innerHTML = `
      <td><input name="item_code" value="${row.item_code||""}" class="mono" required></td>
      <td><input name="item_name" value="${row.item_name||""}" required></td>
      <td><input name="uom" value="${row.uom||"EA"}" size="4"></td>
      <td><input name="qty" type="number" step="0.001" min="0.001" value="${row.qty||1}" class="num"></td>
      <td><input name="batch" value="${row.batch||""}"></td>
      <td><input name="serial" value="${row.serial||""}"></td>
      <td><button type="button" class="btn-del">×</button></td>`;
    mvLines.appendChild(tr);
  }
  mvLines.addEventListener("click", (e)=>{ const t=e.target; if(t && t.classList.contains("btn-del")) t.closest("tr").remove(); });

  // Escaneo HID
  let mult=1; if (scanInput){
    scanInput.addEventListener("keydown", (e)=>{
      if(e.key!=="Enter") return; e.preventDefault();
      const raw=scanInput.value.trim(); scanInput.value=""; if(!raw) return;
      const m=raw.match(/^x(\d{1,4})$/i); if(m){ mult=Math.max(1,parseInt(m[1],10)); log(`Multiplicador: x${mult}`); return; }
      addMvLine({ item_code: raw, item_name: "", uom:"EA", qty: mult });
      log(`Código ${raw} agregado x${mult}`); mult=1;
    });
  }
  function log(msg){ const p=document.createElement("div"); p.textContent=msg; if (scanLog) scanLog.prepend(p); }

  document.getElementById("btn-add-mv-line")?.addEventListener("click", ()=>{
    const p=document.getElementById("manual-panel"); if(!p) return;
    const q=(n)=>p.querySelector(`[name="${n}"]`)?.value?.trim()||"";
    addMvLine({ item_code:q("item_code"), item_name:q("item_name"), uom:q("uom")||"EA", qty: parseFloat(q("qty"))||1, batch:q("batch")||null, serial:q("serial")||null });
  });

  frmMove.addEventListener("submit", async (e)=>{
    e.preventDefault();
    const type = frmMove.type.value;
    const wf = frmMove.warehouse_from.value || null;
    const wt = frmMove.warehouse_to.value || null;
    const reference = frmMove.reference.value || null;
    const note = frmMove.note.value || null;
    const rows=[...mvLines.querySelectorAll("tr")];
    const lines=[];
    for(const tr of rows){
      const g=(n)=>tr.querySelector(`[name="${n}"]`)?.value?.trim()||"";
      const qty=parseFloat(g("qty")); if(!g("item_code")||!(qty>0)) continue;
      lines.push({ item_code:g("item_code"), item_name:g("item_name")||g("item_code"), uom:g("uom")||"EA", qty, batch:g("batch")||null, serial:g("serial")||null });
    }
    if(!lines.length){ return setMvStatus("Agrega al menos una línea"); }
    try{
      for(const ln of lines){
        const payload = { ...ln, type, warehouse_from: wf, warehouse_to: wt, reference, note };
        const resp = await fetch("/inventory/movements", { method:"POST", headers:{"Content-Type":"application/json"}, credentials:"include", body: JSON.stringify(payload)});
        const ct = resp.headers.get("content-type")||""; const data = ct.includes("json")? await resp.json().catch(()=>null): null;
        if(!resp.ok) throw new Error((data && data.detail) || `HTTP ${resp.status}`);
      }
      setMvStatus("Movimiento creado");
      mvLines.innerHTML="";
    }catch(err){ setMvStatus(`Error: ${err.message}`); }
  });

  document.getElementById("btn-clear-mv")?.addEventListener("click", ()=>{ mvLines.innerHTML=""; setMvStatus(""); });

  // cargar bodegas en selects
  (async ()=>{
    try{ const list = await fetchJSON("/inventory/warehouses");
      const fill=(sel)=> sel.innerHTML = ['<option value=""></option>'].concat(list.map(w=>`<option value="${w.code}">${w.code} — ${w.name}</option>`)).join("");
      fill(frmMove.warehouse_from); fill(frmMove.warehouse_to);
      // Preselect type from query param if present
      const params = new URLSearchParams(location.search);
      const t = (params.get('type')||'').toUpperCase();
      const selType = frmMove.querySelector('select[name="type"]');
      if (selType && ['OUTBOUND','TRANSFER','RETURN','ADJUST'].includes(t)) selType.value = t;
    }catch{ const opt='<option value="BP">BP — Bodega Principal</option>'; frmMove.warehouse_from.innerHTML=opt; frmMove.warehouse_to.innerHTML=opt; }
  })();
})();

// Views: balances + movements
(function(){
  const balBody=document.querySelector("#tbl-balance tbody");
  const movBody=document.querySelector("#tbl-mov tbody");
  const loadBalances = async ()=>{
    const item=document.getElementById("f-item").value.trim();
    const wh=document.getElementById("f-wh").value;
    const qs=new URLSearchParams(); if(item) qs.set("item_code", item); if(wh) qs.set("warehouse", wh);
    const rows = await fetchJSON(`/inventory/balances?${qs}`);
    balBody.innerHTML = rows.map(r=>`<tr><td class="mono">${r.item_code}</td><td>${r.warehouse_code}</td><td>${r.batch||""}</td><td>${r.serial||""}</td><td class="num">${r.qty}</td></tr>`).join("");
  };
  const loadMovements = async ()=>{
    const rows = await fetchJSON(`/inventory/movements?limit=100`);
    movBody.innerHTML = rows.map(r=>`<tr><td>${new Date(r.created_at).toLocaleString()}</td><td>${r.type}</td><td class="mono">${r.item_code} — ${r.item_name||""}</td><td class="num">${r.qty}</td><td>${r.warehouse_from||""}</td><td>${r.warehouse_to||""}</td><td>${r.reference||""}</td></tr>`).join("");
  };
  document.getElementById("btn-load-balance")?.addEventListener("click", loadBalances);
  document.getElementById("btn-load-mov")?.addEventListener("click", loadMovements);
  (async ()=>{ // populate warehouse filter
    try{ const list = await fetchJSON("/inventory/warehouses"); const sel=document.getElementById("f-wh"); sel.innerHTML = `<option value="">(todas)</option>` + list.map(w=>`<option value="${w.code}">${w.code} — ${w.name}</option>`).join(""); }catch{}
  })();
})();
